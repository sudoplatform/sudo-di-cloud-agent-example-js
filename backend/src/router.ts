import { resolve, sep as pathSep } from 'path';
import Express, { Request, Response, Router } from 'express';
import { Environment } from './environment.js';
import CloudAgent from './CloudAgent.js';

/**
 * A function to initialize routes for the example app, given an environment configuration.
 */
export function initRouter(env: Environment, cloudAgent: CloudAgent): Router {
  const router = Express.Router();

  // serve static content, if the static content root directory is defined
  if (env.staticContentRootDirectory) {
    router.use('/', Express.static(resolve(...env.staticContentRootDirectory.split(pathSep))));
  }

  /**
   * Routes for frontend-to-backend communication.
   * These routes expect JSON in the request body, and return JSON in the response body.
   */
  router.use('/api/', Express.json());
  router.post('/api/connection-invitation', initRoutePostConnectionInvitation(cloudAgent));
  router.post('/api/accept-connection-invitation', initRoutePostAcceptConnectionInvitation(cloudAgent));
  router.get('/api/connection/:connectionId', initRouteGetConnectionState(cloudAgent));
  router.post('/api/anoncreds/schema', initRoutePostAnoncredsSchema(cloudAgent));
  router.post('/api/anoncreds/credential-definition', initRoutePostAnoncredsCredDef(cloudAgent));
  router.post('/api/anoncreds/issue-credential', initRoutePostAnoncredsCredentialOffer(cloudAgent));
  router.post('/api/w3c/issue-credential', initRoutePostW3cCredentialOffer(cloudAgent));
  router.get('/api/w3c/credential-offer/:connectionId', initRouteGetW3cCredentialOffer(cloudAgent));
  router.post('/api/w3c/credential-request', initRoutePostW3cCredentialRequest(cloudAgent));
  router.get(
    '/api/anoncreds/credential-exchange/:credentialExchangeId',
    initRouteGetAnoncredsCredentialExchangeState(cloudAgent),
  );
  router.get('/api/w3c/credential-exchange/:credentialExchangeId', initRouteGetW3cCredentialExchangeState(cloudAgent));
  router.post('/api/anoncreds/proof-request', initRoutePostAnoncredsProofRequest(cloudAgent));
  router.post('/api/w3c/proof-request', initRoutePostW3cProofRequest(cloudAgent));
  router.get('/api/w3c/proof-request/:connectionId', initRouteGetW3cProofRequest(cloudAgent));
  router.post('/api/w3c/proof-presentation', initRoutePostW3cProofPresentation(cloudAgent));
  router.get(
    '/api/anoncreds/presentation-exchange/:presentationExchangeId',
    initRouteGetAnoncredsPresentationExchangeState(cloudAgent),
  );
  router.get(
    '/api/w3c/presentation-exchange/:presentationExchangeId',
    initRouteGetW3cPresentationExchangeState(cloudAgent),
  );

  // use a default route for requests which cannot be served by another route
  router.get('*', initDefaultRoute(env));

  return router;
}

/**
 * Default route: return static content if its root directory is defined, otherwise return status 404 "Not Found".
 */
function initDefaultRoute(env: Environment) {
  return (request: Request, response: Response) => {
    env.staticContentRootDirectory
      ? response.sendFile(resolve(...env.staticContentRootDirectory.split(pathSep), 'index.html'))
      : response.sendStatus(404);
  };
}

/**
 * Route handler to create a new connection invitation.
 *
 * Request body: json object {
 *   connectionAlias: The human-readable name which users of this application can use to identify the connection.
 * }
 * Response body: json object {
 *   connectionId: New id which can be used to identify the pending connection.
 *   invitationUrl: URL which an Edge Agent can use to accept the invitation and establish the connection.
 * }
 */
function initRoutePostConnectionInvitation(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const connectionAlias = request.body['connectionAlias'] ?? '';
    const result = await cloudAgent.createConnectionInvitation(connectionAlias);
    response.json(result);
  };
}

/**
 * Route handler to accept a connection invitation.
 *
 * Request body: json object {
 *   connectionAlias: The human-readable name which users of this application can use to identify the connection.
 *   invitationUrl: The invitation URL generated by the other agent (the inviter), which contains the base64 encoded
 *                  invitation object.
 * }
 * Response body: json object {
 *   connectionId: New id which can be used to identify the pending connection.
 * }
 */
function initRoutePostAcceptConnectionInvitation(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const connectionAlias = request.body['connectionAlias'] ?? '';
    const invitationUrl = request.body['invitationUrl'] ?? '';
    const result = await cloudAgent.acceptConnectionInvitation(connectionAlias, invitationUrl);
    response.json(result);
  };
}

/**
 * Route handler to get the state of a connection.
 * The connection is identified by a connection id param in the request URL.
 *
 * Request param:
 *   connectionId: The id of the connection to get the state of.
 * Response body: json object {
 *   connectionId: Matches the request param connectionId, for convenience.
 *   state: The state of the connection.
 * }
 */
function initRouteGetConnectionState(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const connectionId = request.params['connectionId'] ?? '';
    const result = await cloudAgent.getConnectionState(connectionId);
    response.json(result);
  };
}

/**
 * Route handler to publish a new schema to the ledger.
 *
 * Request body: void
 * Response body: json object {
 *   schemaId: The id of the new schema.
 * }
 */
function initRoutePostAnoncredsSchema(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const result = await cloudAgent.publishAnoncredsSchema();
    response.json(result);
  };
}

/**
 * Route handler to publish a new credDef (credential definition) to the ledger for a specified schema.
 *
 * Request body: json object {
 *   schemaId: The id of the schema to use for the new credDef.
 * }
 * Response body: json object {
 *   credDefId: The id of the new credDef.
 * }
 */
function initRoutePostAnoncredsCredDef(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const schemaId = request.body['schemaId'] ?? '';
    const result = await cloudAgent.publishAnoncredsCredDef(schemaId);
    response.json(result);
  };
}

/**
 * Route handler to send a credential offer to a specified connection.
 *
 * Request body: json object {
 *   connectionId: The id of the connection to send the credential offer to.
 *   credDefId: The id of the credDef (credential definition) to use as the base for the new credential.
 *   credentialData: Data values for the attributes listed in the credDef.
 * }
 * Response body: json object {
 *   credentialExchangeId: The id of the new credential exchange associated with the credential offer.
 * }
 */
function initRoutePostAnoncredsCredentialOffer(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const connectionId = request.body['connectionId'] ?? '';
    const credDefId = request.body['credDefId'] ?? '';
    const credentialData = request.body['credentialData'] ?? { name: '', expiry: '' };
    const result = await cloudAgent.sendAnoncredsCredentialOffer(connectionId, credDefId, credentialData);
    response.json(result);
  };
}

/**
 * Route handler to send a W3C credential offer to a specified connection.
 *
 * Request body: json object {
 *   connectionId: The id of the connection to send the credential offer to.
 *   credentialData: Data values for the attributes of the credential.
 * }
 * Response body: json object {
 *   credentialExchangeId: The id of the new credential exchange associated with the credential offer.
 *   issuerDid: The DID of the issuer, returned so it may be displayed in the UI.
 * }
 */
function initRoutePostW3cCredentialOffer(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const connectionId = request.body['connectionId'] ?? '';
    const credentialData = request.body['credentialData'] ?? { givenName: '', familyName: '' };
    const result = await cloudAgent.sendW3cCredentialOffer(connectionId, credentialData);
    response.json(result);
  };
}

/**
 * Route handler to get a W3C credential offer received from a specified connection.
 *
 * Request param:
 *   connectionId: The id of the connection to check for received credential offers.
 * Response body: json object {
 *   credentialExchangeId: The id of the credential exchange associated with the received credential offer.
 *   credentialData: Data values for the attributes in the offered credential, returned for display in the UI.
 * }
 */
function initRouteGetW3cCredentialOffer(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const connectionId = request.params['connectionId'] ?? '';
    const result = await cloudAgent.getW3cCredentialOffer(connectionId);
    response.json(result);
  };
}

/**
 * Route handler to send a W3C credential request, in response to a received W3C credential offer.
 *
 * Request body: json object {
 *   credentialExchangeId: The id of the credential exchange to advance.
 *                         This credential exchange should be in the 'offer-received' state.
 * }
 * Response body: json object {
 *   holderDid: The DID of the holder, generated especially for this credential.
 *              It is returned so it may be displayed in the UI.
 * }
 */
function initRoutePostW3cCredentialRequest(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const credentialExchangeId = request.body['credentialExchangeId'] ?? '';
    const result = await cloudAgent.postW3cCredentialRequest(credentialExchangeId);
    response.json(result);
  };
}

/**
 * Route handler to get the state of a credential exchange.
 * The credential exchange is identified by a credential exchange id param in the request URL.
 *
 * Request param:
 *   credentialExchangeId: The id of the credential exchange to get the state of.
 * Response body: json object {
 *   credentialExchangeId: Matches the request param credentialExchangeId, for convenience.
 *   state: The state of the credential exchange.
 * }
 */
function initRouteGetAnoncredsCredentialExchangeState(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const credentialExchangeId = request.params['credentialExchangeId'] ?? '';
    const result = await cloudAgent.getAnoncredsCredentialExchangeState(credentialExchangeId);
    response.json(result);
  };
}

/**
 * Route handler to get the state of a W3C credential exchange.
 * The credential exchange is identified by a credential exchange id param in the request URL.
 *
 * Request param:
 *   credentialExchangeId: The id of the W3C credential exchange to get the state of.
 * Response body: json object {
 *   credentialExchangeId: Matches the request param credentialExchangeId, for convenience.
 *   state: The state of the credential exchange.
 *   credentialId: If a credential was received and stored as a result of this exchange,
 *                 then this will be set to the id of the credential.
 * }
 */
function initRouteGetW3cCredentialExchangeState(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const credentialExchangeId = request.params['credentialExchangeId'] ?? '';
    const result = await cloudAgent.getW3cCredentialExchangeState(credentialExchangeId);
    response.json(result);
  };
}

/**
 * Route handler to request a proof presentation from a specified connection.
 *
 * Request body: json object {
 *   connectionId: The id of the connection to request the proof presentation from.
 *   credDefId: The id of the credDef (credential definition) to restrict which credentials can be used
 *              to satisfy the proof presentation request.
 * }
 * Response body: json object {
 *   presentationExchangeId: The id of the new presentation exchange associated with the proof presentation request.
 * }
 */
function initRoutePostAnoncredsProofRequest(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const connectionId = request.body['connectionId'] ?? '';
    const credDefId = request.body['credDefId'] ?? '';
    const result = await cloudAgent.sendAnoncredsProofRequest(connectionId, credDefId);
    response.json(result);
  };
}

/**
 * Route handler to request a W3C proof presentation from a specified connection.
 *
 * Request body: json object {
 *   connectionId: The id of the connection to request the proof presentation from.
 *   issuerDid: The id of the issuer to restrict which credentials can be used
 *              to satisfy the proof presentation request.
 * }
 * Response body: json object {
 *   presentationExchangeId: The id of the new presentation exchange associated with the proof presentation request.
 * }
 */
function initRoutePostW3cProofRequest(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const connectionId = request.body['connectionId'] ?? '';
    const issuerDid = request.body['issuerDid'] ?? '';
    const result = await cloudAgent.sendW3cProofRequest(connectionId, issuerDid);
    response.json(result);
  };
}

/**
 * Route handler to get a W3C proof request received from a specified connection.
 *
 * Request param:
 *   connectionId: The id of the connection to check for received proof requests.
 * Response body: json object {
 *   presentationExchangeId: The id of the presentation exchange associated with the received proof request.
 * }
 */
function initRouteGetW3cProofRequest(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const connectionId = request.params['connectionId'] ?? '';
    const result = await cloudAgent.getW3cProofRequest(connectionId);
    response.json(result);
  };
}

/**
 * Send a W3C proof presentation, in response to a received W3C proof request.
 *
 * Request body: json object {
 *   presentationExchangeId: The id of the presentation exchange to advance.
 *                           This presentation exchange should be in the 'request-received' state.
 *   credentialId: The id of the credential to use in the proof presentation.
 * }
 * Response body: json object {
 *   presentationExchangeId: Matches the param presentationExchangeId, for convenience.
 *   state: The state of the presentation exchange protocol.
 * }
 */
function initRoutePostW3cProofPresentation(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const presentationExchangeId = request.body['presentationExchangeId'] ?? '';
    const credentialId = request.body['credentialId'] ?? '';
    const result = await cloudAgent.sendW3cProofPresentation(presentationExchangeId, credentialId);
    response.json(result);
  };
}

/**
 * Route handler to get the state of a proof presentation exchange.
 * The presentation exchange is identified by a presentation exchange id param in the request URL.
 *
 * Request param:
 *   presentationExchangeId: The id of the presentation exchange to get the state of.
 * Response body: json object {
 *   presentationExchangeId: Matches the request param presentationExchangeId, for convenience.
 *   state: The state of the presentation exchange protocol.
 *   revealedAttributes: The attributes revealed by the connection in the proof presentation,
 *     if the proof presentation has been received.
 *   verified: When state==="verified", this will be true if the revealedAttributes have been verified
 *     as being cryptographically secure. Otherwise, this will be false.
 * }
 */
function initRouteGetAnoncredsPresentationExchangeState(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const presentationExchangeId = request.params['presentationExchangeId'] ?? '';
    const result = await cloudAgent.getAnoncredsProofPresentationExchangeState(presentationExchangeId);
    response.json(result);
  };
}

/**
 * Route handler to get the state of a W3C proof presentation exchange.
 * The presentation exchange is identified by a presentation exchange id param in the request URL.
 *
 * Request param:
 *   presentationExchangeId: The id of the presentation exchange to get the state of.
 * Response body: json object {
 *   presentationExchangeId: Matches the request param presentationExchangeId, for convenience.
 *   state: The state of the presentation exchange protocol.
 *   revealedAttributes: The attributes revealed by the connection in the proof presentation,
 *     if the proof presentation has been received.
 *   verified: When state==="done", this will be true if the revealedAttributes have been verified
 *     as being cryptographically secure. Otherwise, this will be false.
 * }
 */
function initRouteGetW3cPresentationExchangeState(cloudAgent: CloudAgent) {
  return async (request: Request, response: Response) => {
    const presentationExchangeId = request.params['presentationExchangeId'] ?? '';
    const result = await cloudAgent.getW3cProofPresentationExchangeState(presentationExchangeId);
    response.json(result);
  };
}
